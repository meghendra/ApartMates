package com.mycompany.jsfclasses;import com.mycompany.entityclasses.Expense;import com.mycompany.entityclasses.Roommate;import com.mycompany.entityclasses.Task;import com.mycompany.jsfclasses.util.JsfUtil;import com.mycompany.sessionbeans.ExpenseFacade;import com.mycompany.sessionbeans.RoommateFacade;import java.io.Serializable;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.Iterator;import java.util.List;import javax.ejb.EJB;import javax.inject.Named;import javax.enterprise.context.SessionScoped;import javax.faces.context.FacesContext;@Named("expenseController")@SessionScopedpublic class ExpenseController implements Serializable {    private String statusMessage;    private List<Expense> expenses = null;    private Expense selectedExpense;    private Integer expenseID;    private String expenseName;    private BigDecimal expenseAmount;    private String expenseLendees;    private String expenseLocation;    private String expenseDetails;    private Date expenseTimestamp;    private String expenseIsSettled = "No";    private Integer apartmentID;    private List<Roommate> selectedRoommates;    @EJB    private ExpenseFacade expenseFacade;    @EJB    private RoommateFacade roommateFacade;    public ExpenseController() {    }    public String getStatusMessage() {        return statusMessage;    }    public void setStatusMessage(String statusMessage) {        this.statusMessage = statusMessage;    }    public Integer getExpenseID() {        return expenseID;    }    public void setExpenseID(Integer expenseID) {        this.expenseID = expenseID;    }    public String getExpenseName() {        return expenseName;    }    public void setExpenseName(String expenseName) {        this.expenseName = expenseName;    }    public BigDecimal getExpenseAmount() {        return expenseAmount;    }    public void setExpenseAmount(BigDecimal expenseAmount) {        this.expenseAmount = expenseAmount;    }    public String getExpenseLendees() {        return expenseLendees;    }    public void setExpenseLendees(String expenseLendees) {        this.expenseLendees = expenseLendees;    }    public String getExpenseLocation() {        return expenseLocation;    }    public void setExpenseLocation(String expenseLocation) {        this.expenseLocation = expenseLocation;    }    public String getExpenseDetails() {        return expenseDetails;    }    public void setExpenseDetails(String expenseDetails) {        this.expenseDetails = expenseDetails;    }    public Date getExpenseTimestamp() {        return expenseTimestamp;    }    public void setExpenseTimestamp(Date expenseTimestamp) {        this.expenseTimestamp = expenseTimestamp;    }    public String getExpenseIsSettled() {        return expenseIsSettled;    }    public void setExpenseIsSettled(String expenseIsSettled) {        this.expenseIsSettled = expenseIsSettled;    }    public Integer getApartmentID() {        return apartmentID;    }    public void setApartmentID(Integer apartmentID) {        this.apartmentID = apartmentID;    }    public ExpenseFacade getExpenseFacade() {        return expenseFacade;    }    public void setExpenseFacade(ExpenseFacade expenseFacade) {        this.expenseFacade = expenseFacade;    }    public List<Roommate> getSelectedRoommates() {        return selectedRoommates;    }    public void setSelectedRoommates(List<Roommate> selectedRoommates) {        this.selectedRoommates = selectedRoommates;    }    public List<Expense> getExpenses() {        if (expenses == null) {            expenses = getExpensesByRoommateID();        }        return expenses;    }    public List<Expense> getExpensesByRoommateID() {        if (expenses == null) {            // TaskFacade inherits the findAll() method from the AbstractFacade class            if (FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("roommateID") != null) {                expenses = expenseFacade.findByLenderID((int) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("roommateID"));            }        }        return expenses;    }    public Expense prepareCreate() {        // Instantiate a new Company object and store its object reference into instance variable 'selected'        selectedExpense = new Expense();        initializeEmbeddableKey();  // Initialize embeddable primary key for the new object        return selectedExpense;    }    public String getRoommateNamesByIDs() {        String roommateNames = "";        if (selectedExpense.getExpenseLendees() != null) {            String[] roommateIDs = selectedExpense.getExpenseLendees().split(",");            for (String rid : roommateIDs) {                int id = Integer.parseInt(rid);                Roommate r = roommateFacade.getRoommateFacade(id);                roommateNames = roommateNames + r.getFirstName() + ",";            }            if (roommateNames.length() > 0) {                roommateNames = roommateNames.substring(0, roommateNames.length() - 1);            }        }        return roommateNames;    }    public String createExpense() {        if (statusMessage == null || statusMessage.isEmpty()) {            try {                Expense expense = new Expense();                // Dress up the newly created expense object with the values given                expense.setExpenseName(expenseName);                expense.setExpenseAmount(expenseAmount);                expense.setExpenseLender((int) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("roommateID"));                String lendees = "";                for (Roommate r : selectedRoommates) {                    lendees = lendees + r.getRoommateID() + ",";                }                if (lendees.length() > 0) {                    lendees = lendees.substring(0, lendees.length() - 1);                }                expense.setExpenseLendees(lendees);                if (expenseLocation != null) {                    expense.setExpenseLocation(expenseLocation);                }                if (expenseDetails != null) {                    expense.setExpenseDetails(expenseDetails);                }                if (expenseTimestamp != null) {                    expense.setExpenseTimestamp(expenseTimestamp);                }                expense.setExpenseIsSettled(expenseIsSettled);                expense.setApartmentID((int) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("apartmentID"));                expenseFacade.create(expense);                if (!JsfUtil.isValidationFailed()) {                    // The CREATE operation is successfully performed                    expenses = null;    // Empty the items list                    selectedExpense = null;                }            } catch (Exception e) {                statusMessage = "Something went wrong while creating the expense!";                return "";            }        }        return "";    }    public String updateExpense() {        if (statusMessage == null || statusMessage.isEmpty()) {            String lendees = "";            for (Roommate r : selectedRoommates) {                lendees = lendees + r.getRoommateID() + ",";            }            if (lendees.length() > 0) {                lendees = lendees.substring(0, lendees.length() - 1);            }            selectedExpense.setExpenseLendees(lendees);            expenseFacade.edit(selectedExpense);            if (!JsfUtil.isValidationFailed()) {                // The CREATE operation is successfully performed                expenses = null;    // Empty the items list                selectedExpense = null;            }        }        return "";    }    public void deleteExpense() {        if (statusMessage == null || statusMessage.isEmpty()) {            expenseFacade.remove(selectedExpense);            if (!JsfUtil.isValidationFailed()) {                // The DELETE operation is successfully performed                selectedExpense = null;    // Set the instance variable 'selected' point to no object                expenses = null;       // Empty the items list            }        }    }    public Expense getSelectedExpense() {        return selectedExpense;    }    public void setSelectedExpense(Expense selectedExpense) {        this.selectedExpense = selectedExpense;    }    protected void setEmbeddableKeys() {    }    protected void initializeEmbeddableKey() {    }}